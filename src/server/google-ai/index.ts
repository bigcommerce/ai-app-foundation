import { type z } from "zod";
import { type AiSchema } from "../routers/_app";
import { env } from "~/env.mjs";
import { TRPCError } from "@trpc/server";
import { GoogleAuth } from "google-auth-library";
import { TextServiceClient } from "@google-ai/generativelanguage";

const MODEL_NAME = 'models/text-bison-001';
const API_KEY = env.GOOGLE_API_KEY;

export default async function generateDescription(attributes: z.infer<typeof AiSchema>): Promise<string> {
    // const client = new TextServiceClient({
    //     authClient: new GoogleAuth().fromAPIKey(API_KEY),
    // });

    // const prompt = "Repeat after me: one, two,";
    // const response = await client
    //     .generateText({
    //         model: MODEL_NAME,
    //         prompt: {
    //             text: prompt,
    //         },
    //     });

    // console.log(JSON.stringify(response));
    // return JSON.stringify(response);

    await new Promise((resolve) => setTimeout(resolve, 1000));

    return `This is a description generated by Google Generative AI:\n ${JSON.stringify(attributes)}`;

    //     const configuration = new Configuration({ apiKey: env.OPENAI_API_KEY });
    //     const openai = new OpenAIApi(configuration);

    //     const addToBundle = ADD_TO_BUNDLE_OPTIONS.find((option) => option.value === attributes.addToBundle)?.content;
    //     const inOrderTo = IN_ORDER_TO_OPTIONS.find((option) => option.value === attributes.reason)?.content;
    //     const forCustomers = FOR_CUSTOMERS_OPTIONS.find((option) => option.value === attributes.customerReason)?.content;

    //     const prompt = `
    // **Goal:**
    // Based on provided input parameters, recommend a list of product IDs in JSON format to bundle with the original product and return the list of product ids in JSON format.

    // Input Parameters:
    // - products: ${JSON.stringify(attributes.products)}
    // - original_product: "${attributes.originalProductId}"
    // - Add to bundle: "${addToBundle}"
    // - In order to: "${inOrderTo}"
    // - For customers: "${forCustomers}"
    // - Number of products: "${attributes.numberOfProducts}"

    // **Rules:**
    // Carefully analyze the original product and list of products to determine which products to recommend.
    // Do not include original product in bundle.
    // Do not explain the reasoning behind the recommendation. Just recommend the products in JSON format.
    // Do not recommend accessories if the is no compatible original product or another recommended products.

    // **JSON Output Format(ONLY JSON, NO OTHER TEXT):**
    // { "product_ids": [<product_id>, <product_id>, ...] }
    // `;

    //     try {
    //         const chatCompletion = await openai.createChatCompletion({
    //             model: "gpt-3.5-turbo",
    //             messages: [
    //                 {
    //                     role: 'system',
    //                     content: 'Act as an e-commerce merchandising expert and recommend product bundles of products based on the original product, list of products, and provided input parameters. You can send you a list of product ids in JSON format.',
    //                 },
    //                 { role: "user", content: prompt },
    //             ],
    //             max_tokens: 100,
    //         });
    //         console.log('prompt:', prompt);
    //         console.log('response:', chatCompletion?.data.choices);
    //         return JSON.parse(chatCompletion?.data.choices[0]?.message?.content).product_ids;
    //     } catch (error) {
    //         if (error.response) {
    //             console.log(error.response.status);
    //             console.log(error.response.data);
    //         } else {
    //             console.log(error.message);
    //         }
    //         throw new TRPCError({ message: 'Our Bundle senior engineer got tired, please try again', code: 'INTERNAL_SERVER_ERROR' })
    //     }
}
